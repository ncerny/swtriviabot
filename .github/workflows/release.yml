name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.14'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest --cov=src --cov-report=html --cov-report=term-missing --cov-fail-under=80

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install semantic-release
        run: npm ci

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release | tee semantic-release.log
          
          # Extract version from semantic-release output
          if grep -q "Published release" semantic-release.log; then
            NEW_VERSION=$(grep "Published release" semantic-release.log | sed -n 's/.*Published release \(.*\) on.*/\1/p')
            echo "new_release_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "new_release_published=true" >> $GITHUB_OUTPUT
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
          fi

      - name: Create production artifact
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          TAG_NAME=v${{ steps.semantic.outputs.new_release_version }}
          mkdir -p artifact-build
          tar --exclude-from=.github/.artifactignore \
              --exclude='artifact-build' \
              -czf artifact-build/swtriviabot-${TAG_NAME}.tar.gz \
              .
          echo "Created artifact: swtriviabot-${TAG_NAME}.tar.gz"
          ls -lh artifact-build/

      - name: Upload artifact to release
        if: steps.semantic.outputs.new_release_published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=v${{ steps.semantic.outputs.new_release_version }}
          gh release upload ${TAG_NAME} \
            artifact-build/swtriviabot-${TAG_NAME}.tar.gz \
            --clobber

      - name: Add artifact info to release notes
        if: steps.semantic.outputs.new_release_published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          TAG_NAME=v${{ steps.semantic.outputs.new_release_version }}
          ARTIFACT_SIZE=$(ls -lh artifact-build/swtriviabot-${TAG_NAME}.tar.gz | awk '{print $5}')
          CURRENT_BODY=$(gh release view ${TAG_NAME} --json body -q .body)
          
          {
            echo ""
            echo "---"
            echo ""
            echo "## ðŸ“¦ Deployment Artifact"
            echo ""
            echo "File: \`swtriviabot-${TAG_NAME}.tar.gz\` (${ARTIFACT_SIZE})"
            echo ""
            echo "Contents: Production-ready code (excludes tests, development tools, and documentation)"
            echo ""
            echo "Deploy:"
            echo "\`\`\`bash"
            echo "# Download and extract"
            echo "curl -LO https://github.com/${REPO}/releases/download/${TAG_NAME}/swtriviabot-${TAG_NAME}.tar.gz"
            echo "tar -xzf swtriviabot-${TAG_NAME}.tar.gz"
            echo ""
            echo "# Install dependencies and run"
            echo "python -m venv .venv"
            echo "source .venv/bin/activate"
            echo "pip install -r requirements.txt"
            echo "python -m src.bot"
            echo "\`\`\`"
          } > release-notes-append.md
          
          echo "${CURRENT_BODY}" > full-release-notes.md
          cat release-notes-append.md >> full-release-notes.md
          gh release edit ${TAG_NAME} --notes-file full-release-notes.md
